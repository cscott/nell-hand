var tagnames = (function() {
    var tags = [ "BeginHMM", "NumStates", "EndHMM", "HmmSetId", "StreamInfo",
                 "VecSize", "ProjSize", "InputXform", "ParentXform",
                 "DiagC", "InvDiagC", "FullC", "LLTC", "XformC",
                 "nullD", "poissonD", "gammaD", "genD",
                 "State", "NumMixes", "SWeights", "Stream",
                 "Mixture", "TMix", "DProb", "GConst", "Mean",
                 "Variance", "InvCovar", "LLTCovar", "Xform",
                 "Duration", "TransP", "MMFldMask", "Parameters", "NumClasses",
                 "Class", "BaseClass", "Node", "TNode", "XformSet",
                 "AdaptKind", "XformKind", "NumXforms",
                 "LinXform", "Offset", "BlockInfo", "Bias", "Block",
                 "PreQual" ];
    var t = {};
    for (var i=0; i<tags.length; i++) {
        t[tags[i].toLowerCase()] = tags[i];
    }
    return t;
})();

var toarr = function(o) {
    var r = [];
    for (name in o) {
        if (o.hasOwnProperty(name)) {
            r[name] = o[name];
        }
    }
    r.shift();
    return r;
};

var omerge = function() {
    var r = {};
    for (var i=0; i<arguments.length; i++) {
        var o = arguments[i];
        for (name in o) {
            if (o.hasOwnProperty(name)) {
                r[name] = o[name];
            }
        }
    }
    return r;
};

var propval = function(prop, val) {
    var r = {};
    r[prop] = val;
    return r;
};

var chklen = function(len, array) {
    console.assert(array.length === len);
    return array;
};

var sqmat = function(size, array) {
    console.assert(array.length === size*size);
    return { rows: size, cols: size, type: "square", entries: array };
};
var rectmat = function(rows, cols, array) {
    console.assert(array.length === rows*cols);
    return { rows: rows, cols: cols, type: "rect", entries: array };
};
var trimat = function(size, array) {
    console.assert((2*array.length) === (size*size + size));
    return { rows: size, cols: size, type: "tri", entries: array };
};

var mkmacro = function(type, name, value) {
    return { type: type, name: name, value: value };
};

ometa HMM <: Parser {
    /* scanner (token processing) */
    tok       = spaces ( macrotype | tag | number | str | special ),
    token :tt = tok:t ?(t[0] === tt) -> t[1],

    macrotype     = '~' spaces letter:l -> ['~'+l, l],
    tag       = '<' spaces tagname:t spaces '>' -> ['<'+t+'>', t],
    tagname   = letter+:ls ?(tagnames[ls.join('').toLowerCase()])
              -> tagnames[ls.join('').toLowerCase()],

    number    = optsign:s numpart:np exppart:es
              -> [#number, parseFloat(s+np+es)]
              | optsign:s 'i' 'n' 'f'
              -> [#number, (s==='-')?-Infinity:Infinity],
    numpart   = digit+:ws ('.' digit+ | ~'.'->[]):fs ~digit
              -> (ws.join('')+'.'+fs.join(''))
              | '.' digit+:fs ~digit
              -> ('0.'+fs.join('')),
    exppart   = ('e'|'E'):e optsign:s digit+:ds ~digit -> (e+s+ds.join(''))
              | ~('e'|'E') -> '',
    optsign   = '+' | '-' | empty -> '',

    escapeChar   = '\\' char:c
        -> unescape('\\' + c),
    str          = '"'  (escapeChar | ~'"'  char)*:cs '"'
        -> [#string, cs.join('')],
    special = ( '<' | '>' | '{' | '}' | '(' | ')' | '[' | ']' |
                '*' | ',' | '.' | '-' ):s -> [s, s],

    string       = token(#string),
    byte         = token(#number),
    short        = token(#number),
    int          = token(#number),
    float        = token(#number),
    macro        = token(#string),

    q :s      = spaces letter+:l ?( l.join('').toLowerCase() === s ) -> s,

    macrodef :ty :rule = token(ty) macro:name apply(rule):val
                       -> mkmacro(ty, name, val),
    macroref :ty :rule :tag = apply(rule) | token(ty) macro:name
                       -> propval(tag, { macro: mkmacro(ty, name) } ),

    // top level rule.
    top = def*:ds spaces end -> ds,

    def = optmacro
        | varmacro
        | hmmmacro
        | statemacro
        | weightsmacro
        | mixpdfmacro
        | meanmacro
        | varmacro
        | invmacro
        | xformmacro
        | durationmacro
        | transPmacro
        | baseClass
        | regTree
        | adaptXform
        | xformbiasmacro
        | inputXformmacro,

    hmmmacro = macrodef("~h", #hmmdef)
             | hmmdef:val -> mkmacro("~h", undefined, val),
    hmmdef = "<BeginHMM>"
             (globalOpts | empty->{} ):g
             "<NumStates>" short:numstates
             state+:ss
             transP:tp
             (duration | empty->{}):d
             "<EndHMM>"
           -> omerge({ NumStates: numstates,
                       States: omerge.apply(null, ss) }, g, tp, d),

    optmacro = "~o" globalOpts:g -> mkmacro("~o", undefined, g),
    globalOpts = option+:o -> omerge.apply(null, o),
    option = "<HmmSetId>" string:s -> { HmmSetId: s }
           | "<StreamInfo>" short:num short*:ss -> {StreamInfo: chklen(num, ss)}
           | "<VecSize>" short:s -> { VecSize: s }
           | "<ProjSize>" short:s -> { ProjSize: s }
           | "<InputXform>" inputXform:x -> x
           | "<ParentXform>" "~a" macro:name -> { ParentXform: { macro: mkmacro("~a", name) } }
           | covkind:c -> { CovKind: c }
           | durkind:d -> { DurKind: d }
           | parmkind:p -> { ParmKind: p },

    covkind = "<DiagC>" | "<InvDiagC>" | "<FullC>" | "<LLTC>" | "<XformC>",
    durkind = "<nullD>" | "<poissonD>" | "<gammaD>" | "<genD>",

    parmkind = "<" parmbasekind:pbk ( '_' qual )*:q ">"
         -> { base: pbk, extra: q.join('') },
    qual = letter:l ?( new RegExp("^[DATENZOVCK]$","i").test(l) )
         -> l.toUpperCase(),
    parmbasekind = q('discrete') | q('lpc') | q('lpcepstra') |
                   q('mfcc') | q('fbank') | q('melspec') |
                   q('lprefc') | q('lpdelcep') | q('user'),

    state     = "<State>" short:num stateinfo:si -> propval(num, si),
    stateinfo = "~s" macro:name -> { macro: mkmacro("~s", name) }
              | statedef,
    statemacro = macrodef("~s", #statedef),
    statedef  = (mixes | empty->{}):m
                (weights | empty->{}):w
                stream+:ss
                (duration | empty->{}):d
              -> omerge(m, {Streams: toarr(omerge.apply(null, ss))}, w, d),

    mixes     = "<NumMixes>" short+:ss -> { NumMixes: ss },
    weights   = macroref("~w", #weightsdef, "SWeights"),
    weightsmacro = macrodef("~w", #weightsdef),
    weightsdef = "<SWeights>" short:s vector:v -> { SWeights: chklen(s, v) },
    vector    = float+,

    stream    = ( "<Stream>" short | empty->1):num
                ( mixtures | tmixpdf | discpdf ):s
              -> propval(num, s),
    mixtures  = mixture+:ms -> { Mixtures: toarr(omerge.apply(null, ms)) },
    mixture   = mixnumweight:mnw mixpdf:mp
              -> propval(mnw.num, omerge({Weight: mnw.weight}, mp)),
    mixnumweight = "<Mixture>" short:s float:f -> { num:s, weight:f }
                   | empty -> { num:1, weight:1.0},
    tmixpdf   = "<TMix>" macro:name weightList:wl
              -> { TMix: { name: name, weights: wl } },
    weightList= repShort+,
    repShort  = short:s ( "*" byte | empty -> 1):r -> [s, r],
    discpdf   = "<DProb>" weightList:wl -> { DProb: wl },

    mixpdf    = macroref("~m", #mixpdfdef, "Mix"),
    mixpdfmacro = macrodef("~m", #mixpdfdef),
    mixpdfdef = mean:m cov:c ( gconst | empty->{} ):g -> { Mix: omerge(m,c,g) },
    gconst    = "<GConst>" float:f -> { GConst: f },

    mean      = macroref("~u", #meandef, "Mean"),
    meanmacro = macrodef("~u", #meandef),
    meandef   = "<Mean>" short:len vector:v -> { Mean: chklen(len, v) },

    cov       = var | inv | llt | xform,

    var       = macroref("~v", #vardef, "Variance"),
    varmacro  = macrodef("~v", #vardef),
    vardef    = "<Variance>" short:s vector:v -> { Variance: chklen(s, v) },

    inv       = macroref("~i", #invdef, "InvCovar"),
    invmacro  = macrodef("~i", #invdef),
    invdef    = "<InvCovar>" short:s tmatrix:m
              -> { InvCovar: trimat(s, m) },

    llt       = macroref("~c", #lltdef, "LLTCovar"),
    lltmacro  = macrodef("~c", #lltdef),
    lltdef    = "<LLTCovar>" short:s tmatrix:m
              -> { LLTCovar: trimat(s, m) },

    xform     = macroref("~x", #xformdef, "Xform"),
    xformmacro = macrodef("~x",#xformdef),
    xformdef  = "<Xform>" short:rows short:cols matrix:m
              -> { Xform: rectmat(rows, cols, m) },
    matrix    = float+,
    tmatrix   = matrix,

    duration  = macroref("~d", #durationdef, "Duration"),
    durationmacro = macrodef("~d", #durationdef),
    durationdef = "<Duration>" short:len vector:v
                -> { Duration: chklen(len, v) },

    transP    = macroref("~t", #transPdef, "TransP"),
    transPmacro = macrodef("~t", #transPdef),
    transPdef = "<TransP>" short:size matrix:m -> { TransP: sqmat(size, m) },

    baseClass = macrodef("~b", #baseclassdef),
    baseclassdef = baseopts:bo classes:cs -> omerge(bo, cs),
    baseopts  = "<MMFldMask>" string:s
                "<Parameters>" basekind:k
                "<NumClasses>" int:num
              -> { MMFldMask: s, Parameters: k, NumClasses: num },
    basekind  = q('MixBase') | q('MeanBase') | q('CovBase'),
    classes   = class+:cs -> { Classes: toarr(omerge.apply(null, cs)) },
    class     = "<Class>" int:num itemlist:il -> propval(num, il),

    itemlist  = "{" listOf(#itemSet, ','):il "}" -> il,
    itemSet   = hmmName ( "." ( q('transP') | q('state') itemstate ) )?,
    hmmName   = ident:i -> [i] | identList,
    identList = "(" listOf(#ident, ','):il ")" -> il,
    ident     = ( letterOrDigit | '*' | '?' )+:ls -> ls.join(''),

    itemstate = index ( "." stateComp )?,
    index     = "[" listOf(#intRange, ','):l "]" -> l,
    intRange  = int ( "-" int )?,
    stateComp = q('dur')
              | q('weights')
              | (q('stream') index ".")? q('mix') itemmix,
    itemmix   = index ( "." ( q('mean') | q('cov') ) )?,

    regTree   = macrodef("~r", #regTreedef),
    regTreedef = "<BaseClass>" baseclasses node+ -> { /* XXX */ },
    baseclasses = "~b" macro:name -> { macro: mkmacro("~b", name) }
                | baseclassdef,
    node      = "<Node>" int int int int*
              | "<TNode>" int int int int*,

    adaptXform = macrodef("~a", #adaptXformdef),
    adaptXformdef = adaptOpts "<XformSet>" xformset -> { /* XXX */ },
    adaptOpts = "<AdaptKind>" adaptkind "<BaseClass>" baseclasses
               ("<ParentXform>" parentxform)?,
    parentxform = "~a" macro | adaptXformdef,
    adaptkind = q('tree') | q('base'),
    xformset  = "<XformKind>" xformkind:k "<NumXforms>" int:n linxform*:ls
              -> { XformKind: k, NumXforms: n,
                   Xforms: toarr(omerge.apply(null, ls)) },
    xformkind = q('MLLRMean') | q('MLLRCov') | q('MLLRVar') | q('CMLLR')
              | q('SEMIT'),
    linxform  = "<LinXform>" int:num "<VecSize>" int:vs
                optoffset:off blockdefs:bds
              -> propval(num, { LinXform: omerge({VecSize:vs}, off, bds) }),
    optoffset = "<Offset>" xformbias:b -> { Offset: b }
              | empty -> {},
    blockdefs = "<BlockInfo>" int:len int+:bi block+:bs
              -> { BlockInfo: chklen(len, bi),
                   Blocks: toarr(omerge.apply(null, bs)) },

    xformbias = macroref("~y", #xformbiasdef, "Bias"),
    xformbiasmacro = macrodef("~y", #xformbiasdef),
    xformbiasdef = "<Bias>" short:len vector:v -> { Bias: chklen(len, v) },
    block     = "<Block>" int:num xform:x -> propval(num, x),

    inputXform = macroref("~j", #inputXformdef, "InputXform"),
    inputXformmacro = macrodef("~j", #inputXformdef),
    inputXformdef = inhead:h inmatrix:m -> { InputXform: omerge(h, m) },
    inhead    = "<MMFldMask>" string:s parmkind:p prequal:pq
              -> omerge({ MMFldMask:s, ParmKind: p }, pq),
    prequal   = "<PreQual>" -> { PreQual: true }
              | empty       -> { PreQual: false },
    inmatrix  = "<LinXform>" "<VecSize>" int:vs blockdefs:bds
        -> { LinXform: omerge({ VecSize: vs }, bds) },

    // this grammar can also be used to parse VQ codebooks.
    codebook  = c_header:h c_nodeentries(h):ns spaces end
              -> omerge(h, { Nodes: ns }),
    c_header  = int:magic short:type short:covkind int:numNodes
                int:numStreams nitems(numStreams, #int):widths
              -> { Magic: magic,
                   Type: type ? "tree" : "linear",
                   CovKind: ((covkind===1)?"diagonal":
                             (covkind===2)?"full":
                             (covkind===5)?"euclidean":"other"),
                   Streams:  chklen(numStreams, widths),
                   NumNodes: numNodes },
    c_nodeentries :h = c_nodeentry(h.Streams, h.CovKind)*,
    c_nodeentry :sw :ck =
        short:stream int:vqidx int:nodeid int:leftid int:rightid
        c_meanvector(sw[stream-1]):mean
        c_cov(sw[stream-1], ck):cov
        -> omerge({ Stream: stream, VQ: vqidx,
                    Id:nodeid, LeftId:leftid, RightId:rightid,
                    Mean:mean }, cov),
    c_meanvector :len = nitems(len, #float),
    c_cov :len :ck = empty ?( ck==="euclidean" ) -> {}
                   | nitems(len, #float):v ?( ck==="diagonal" ) -> { InvVar: v }
                   | nitems(len*len, #float):m ?(ck==="full") -> { InvCovar: m }
                   | ~true,

    // useful rule!
    nitems :len :rule = empty ?( len === 0 )
                        -> []
                      | nitems(len-1, rule):l apply(rule):item
                        -> { l.push(item); l }
}
